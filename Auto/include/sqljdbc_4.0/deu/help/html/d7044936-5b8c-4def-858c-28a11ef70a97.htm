<html xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:MSHelp="http://msdn.microsoft.com/mshelp"
	xmlns:mshelp="http://msdn.microsoft.com/mshelp"
	xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5"
	xmlns:msxsl="urn:schemas-microsoft-com:xslt">
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
<META NAME="save" CONTENT="history" />
<title>Verwenden von Standarddatentypen</title>
<meta name="Language" content="de-de" />
<meta name="System.Keywords" content="Standarddatentypen" />
<meta name="Microsoft.Help.Id"
	content="d7044936-5b8c-4def-858c-28a11ef70a97" />
<meta name="Description"
	content="Microsoft JDBC Driver für SQL Server verwendet die JDBC-Standarddatentypen für die Konvertierung der SQL Server-Datentypen in ein Format, das von der Programmiersprache Java verarbeitet werden kann, und umgekehrt." />
<meta name="Microsoft.Help.ContentType" content="Concepts" />
<link rel="stylesheet" type="text/css" href="../local/Classic.css" />
<script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script>
<script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script>
<script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script>
<script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script>
<script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script>
<script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script>
<script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script>
<script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script>
</head>
<body>
	<div id="header">
		<table id="bottomTable" cellpadding="0" cellspacing="0">
			<tr>
				<td align="left"><span id="headerBold">Verwenden von
						Standarddatentypen</span></td>
			</tr>
		</table>
		<table id="gradientTable">
			<tr>
				<td class="nsrBottom" background="../icons/gradient.gif" />
			</tr>
		</table>
	</div>
	<div id="mainSection">
		<div id="mainBody">
			<div class="introduction">
				<p>
					Microsoft JDBC Driver für SQL Server verwendet die
					JDBC-Standarddatentypen für die Konvertierung der SQL
					Server-Datentypen in ein Format, das von der Programmiersprache
					Java verarbeitet werden kann, und umgekehrt. Der JDBC-Treiber
					bietet Unterstützung für die JDBC 4.0-API, die den <span
						sdata="langKeyword" value="SQLXML"><span class="keyword">SQLXML</span></span>-Datentyp
					und nationale (Unicode-)Datentypen wie <span sdata="langKeyword"
						value="NCHAR"><span class="keyword">NCHAR</span></span>, <span
						sdata="langKeyword" value="NVARCHAR"><span class="keyword">NVARCHAR</span></span>,
					<span sdata="langKeyword" value="LONGNVARCHAR"><span
						class="keyword">LONGNVARCHAR</span></span> und <span sdata="langKeyword"
						value="NCLOB"><span class="keyword">NCLOB</span></span> enthält.
				</p>
			</div>
			<h1 class="heading">Datentypzuordnungen</h1>
			<div id="sectionSection0" class="section" name="collapseableSection"
				style="">
				<p>Die folgende Tabelle enthält eine Liste der
					Standardzuordnungen zwischen den SQL Server-Standarddatentypen
					sowie den JDBC- und Java-Datentypen:</p>
				<div class="tableSection">
					<table width="50%" cellspacing="2" cellpadding="5" frame="lhs">
						<tr>
							<th><p>SQL Server-Typen</p></th>
							<th><p>JDBC-Typen (java.sql.Types)</p></th>
							<th><p>Java-Typen</p></th>
						</tr>
						<tr>
							<td><p>bigint</p></td>
							<td><p>BIGINT</p></td>
							<td><p>long</p></td>
						</tr>
						<tr>
							<td><p>binary</p></td>
							<td><p>BINARY</p></td>
							<td><p>byte[]</p></td>
						</tr>
						<tr>
							<td><p>bit</p></td>
							<td><p>BIT</p></td>
							<td><p>boolean</p></td>
						</tr>
						<tr>
							<td><p>char</p></td>
							<td><p>CHAR</p></td>
							<td><p>String</p></td>
						</tr>
						<tr>
							<td><p>date</p></td>
							<td><p>DATE</p></td>
							<td><p>java.sql.Date</p></td>
						</tr>
						<tr>
							<td><p>datetime</p></td>
							<td><p>TIMESTAMP</p></td>
							<td><p>java.sql.Timestamp</p></td>
						</tr>
						<tr>
							<td><p>datetime2</p></td>
							<td><p>TIMESTAMP</p></td>
							<td><p>java.sql.Timestamp</p></td>
						</tr>
						<tr>
							<td><p>datetimeoffset (2)</p></td>
							<td><p>microsoft.sql.Types.DATETIMEOFFSET</p></td>
							<td><p>microsoft.sql.DateTimeOffset</p></td>
						</tr>
						<tr>
							<td><p>decimal</p></td>
							<td><p>DECIMAL</p></td>
							<td><p>java.math.BigDecimal</p></td>
						</tr>
						<tr>
							<td><p>float</p></td>
							<td><p>DOUBLE</p></td>
							<td><p>double</p></td>
						</tr>
						<tr>
							<td><p>image</p></td>
							<td><p>LONGVARBINARY</p></td>
							<td><p>byte[]</p></td>
						</tr>
						<tr>
							<td><p>int</p></td>
							<td><p>INTEGER</p></td>
							<td><p>int</p></td>
						</tr>
						<tr>
							<td><p>money</p></td>
							<td><p>DECIMAL</p></td>
							<td><p>java.math.BigDecimal</p></td>
						</tr>
						<tr>
							<td><p>nchar</p></td>
							<td><p>CHAR</p>
								<p>NCHAR (Java SE 6.0)</p></td>
							<td><p>String</p></td>
						</tr>
						<tr>
							<td><p>ntext</p></td>
							<td><p>LONGVARCHAR</p>
								<p>LONGNVARCHAR (Java SE 6.0)</p></td>
							<td><p>String</p></td>
						</tr>
						<tr>
							<td><p>numeric</p></td>
							<td><p>NUMERIC</p></td>
							<td><p>java.math.BigDecimal</p></td>
						</tr>
						<tr>
							<td><p>nvarchar</p></td>
							<td><p>VARCHAR</p>
								<p>NVARCHAR (Java SE 6.0)</p></td>
							<td><p>String</p></td>
						</tr>
						<tr>
							<td><p>nvarchar(max)</p></td>
							<td><p>VARCHAR</p>
								<p>NVARCHAR (Java SE 6.0)</p></td>
							<td><p>String</p></td>
						</tr>
						<tr>
							<td><p>real</p></td>
							<td><p>REAL</p></td>
							<td><p>float</p></td>
						</tr>
						<tr>
							<td><p>smalldatetime</p></td>
							<td><p>TIMESTAMP</p></td>
							<td><p>java.sql.Timestamp</p></td>
						</tr>
						<tr>
							<td><p>smallint</p></td>
							<td><p>SMALLINT</p></td>
							<td><p>short</p></td>
						</tr>
						<tr>
							<td><p>smallmoney</p></td>
							<td><p>DECIMAL</p></td>
							<td><p>java.math.BigDecimal</p></td>
						</tr>
						<tr>
							<td><p>text</p></td>
							<td><p>LONGVARCHAR</p></td>
							<td><p>String</p></td>
						</tr>
						<tr>
							<td><p>time</p></td>
							<td><p>TIME (1)</p></td>
							<td><p>java.sql.Time (1)</p></td>
						</tr>
						<tr>
							<td><p>timestamp</p></td>
							<td><p>BINARY</p></td>
							<td><p>byte[]</p></td>
						</tr>
						<tr>
							<td><p>tinyint</p></td>
							<td><p>TINYINT</p></td>
							<td><p>short</p></td>
						</tr>
						<tr>
							<td><p>udt</p></td>
							<td><p>VARBINARY</p></td>
							<td><p>byte[]</p></td>
						</tr>
						<tr>
							<td><p>uniqueidentifier</p></td>
							<td><p>CHAR</p></td>
							<td><p>String</p></td>
						</tr>
						<tr>
							<td><p>varbinary</p></td>
							<td><p>VARBINARY</p></td>
							<td><p>byte[]</p></td>
						</tr>
						<tr>
							<td><p>varbinary(max)</p></td>
							<td><p>VARBINARY</p></td>
							<td><p>byte[]</p></td>
						</tr>
						<tr>
							<td><p /></td>
							<td><p /></td>
							<td><p /></td>
						</tr>
						<tr>
							<td><p>varchar</p></td>
							<td><p>VARCHAR</p></td>
							<td><p>String</p></td>
						</tr>
						<tr>
							<td><p>varchar(max)</p></td>
							<td><p>VARCHAR</p></td>
							<td><p>String</p></td>
						</tr>
						<tr>
							<td><p>xml</p></td>
							<td><p>LONGVARCHAR</p>
								<p>LONGNVARCHAR (Java SE 6.0)</p></td>
							<td><p>String</p>
								<p>SQLXML</p></td>
						</tr>
					</table>
				</div>
				<p>
					(1) Zur Verwendung von java.sql.Time mit dem Zeittyp SQL Server
					müssen Sie die Verbindungseigenschaft <span sdata="langKeyword"
						value="sendTimeAsDatetime"><span class="keyword">sendTimeAsDatetime</span></span>
					auf false setzen.
				</p>
				<p>
					(2) Mit <span sdata="link"><a
						href="20bbeacd-ccca-4a46-8184-ff941ae2ec5f.htm">DateTimeOffset-Klasse</a></span>
					können Sie programmatisch auf <span sdata="langKeyword"
						value="datetimeoffset"><span class="keyword">datetimeoffset</span></span>-Werte
					zugreifen.
				</p>
				<p>Der SQL Server-Datentyp "sqlvariant" wird vom JDBC-Treiber
					zurzeit nicht unterstützt. Wenn Daten mit einer Abfrage aus einer
					Tabelle mit einer Spalte abgerufen werden, die den
					sqlvariant-Datentyp enthält, wird eine Ausnahme ausgegeben.</p>
				<p>
					Die folgenden Abschnitte enthalten Beispiele für die Verwendung des
					JDBC-Treibers und der Standarddatentypen. Ein ausführlicheres
					Beispiel für die Verwendung der Standarddatentypen in einer
					Java-Anwendung finden Sie unter <span sdata="link"><a
						href="59ac80cf-fc66-4493-933d-38e479c5f54d.htm">Standarddatentypen
							- Beispiel</a></span>.
				</p>
			</div>
			<h1 class="heading">Abrufen von Daten als Zeichenfolge</h1>
			<div id="sectionSection1" class="section" name="collapseableSection"
				style="">
				<p>
					Wenn Sie Daten von einer Datenquelle abrufen müssen, die einem der
					JDBC-Standarddatentypen zugeordnet ist und als Zeichenfolge
					angezeigt werden soll, oder stark typisierte Daten nicht
					erforderlich sind, können Sie die <a
						href="f81dde01-d328-4b32-8871-1efac645b68e.htm">getString</a>-Methode
					der <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a>-Klasse
					verwenden, wie z. B.:
				</p>
				<div name="snippetGroup">
					<div class="sampleCode">
						<span codeLanguage="Java"><pre>String SQL = "SELECT TOP 10 * FROM Person.Contact";
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery(SQL);

while (rs.next()) {
   System.out.println(rs.getString(4) + " " + rs.getString(6));
}
rs.close();
stmt.close();

</pre></span>
					</div>
				</div>
			</div>
			<h1 class="heading">Abrufen von Daten nach Datentyp</h1>
			<div id="sectionSection2" class="section" name="collapseableSection"
				style="">
				<p>
					Wenn Sie Daten von einer Datenquelle abrufen müssen und den Typ der
					abgerufenen Daten kennen, verwenden Sie eine der <b>get&lt;Type&gt;</b>-Methoden
					der <b>SQLServerResultSet</b>-Klasse, die so genannten <span
						class="term">Abrufmethoden</span>. Sie können bei den <b>get&lt;Type&gt;</b>-Methoden
					einen Spaltennamen oder einen Spaltenindex verwenden, wie im
					Folgenden dargestellt:
				</p>
				<div name="snippetGroup">
					<div class="sampleCode">
						<span codeLanguage="Java"><pre>ResultSet rs = stmt.executeQuery("SELECT lname, job_id FROM employee
   WHERE (lname = 'Brown')");
rs.next();
short empJobID = rs.getShort("job_id");
rs.close();
stmt.close();

</pre></span>
					</div>
				</div>
				<div style="margin: .5em 1.5em .5em 1.5em">
					<b></b>
					<p>
						Die Methoden <b>getUnicodeStream</b> und <b>getBigDecimal</b> mit
						Skalierung sind veraltet und werden vom JDBC-Treiber nicht
						unterstützt.
					</p>
				</div>
			</div>
			<h1 class="heading">Aktualisieren von Daten nach Datentyp</h1>
			<div id="sectionSection3" class="section" name="collapseableSection"
				style="">
				<p>
					Wenn Sie den Wert eines Felds in einer Datenquelle aktualisieren
					müssen, verwenden Sie eine der <b>update&lt;Type&gt;</b>-Methoden
					der <b>SQLServerResultSet</b>-Klasse. Im folgenden Beispiel wird
					die <a href="2bb0319e-12cb-4604-a7e3-b22a24b02296.htm">updateInt</a>-Methode
					zusammen mit der <a href="cfced0ca-a281-40dc-8d2f-370d5f0bf12b.htm">updateRow</a>-Methode
					verwendet, um die Daten in der Datenquelle zu aktualisieren:
				</p>
				<div name="snippetGroup">
					<div class="sampleCode">
						<span codeLanguage="Java"><pre>Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); 
ResultSet rs = stmt.executeQuery("SELECT lname, job_id FROM employee
   WHERE (lname = 'Brown')");
rs.next();
short empJobID = rs.getInt(2);
empJobID++;
rs.first();
rs.updateInt(2, empJobID);
rs.updateRow();
rs.close();
stmt.close();

</pre></span>
					</div>
				</div>
				<div style="margin: .5em 1.5em .5em 1.5em">
					<b></b>
					<p>Der JDBC-Treiber kann keine SQL Server-Spalte mit einem
						Spaltennamen aktualisieren, dessen Länge mehr als 127 Zeichen
						beträgt. Wenn ein Update einer Spalte, deren Name mehr als 127
						Zeichen umfasst, ausgeführt werden soll, wird eine Ausnahme
						ausgegeben.</p>
				</div>
			</div>
			<h1 class="heading">Aktualisieren von Daten durch
				parametrisierte Abfragen</h1>
			<div id="sectionSection4" class="section" name="collapseableSection"
				style="">
				<p>
					Wenn Sie Daten in einer Datenquelle durch eine parametrisierte
					Abfrage aktualisieren müssen, können Sie den Datentyp der Parameter
					mit einer der <b>set&lt;Type&gt;</b>-Methoden der <a
						href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a>-Klasse,
					den so genannten <span class="term">Festlegungsmethoden</span>,
					festlegen. Im folgenden Beispiel werden die parametrisierte Abfrage
					mit der <a href="bd4e4085-f704-4a73-b6a7-7d443d564728.htm">prepareStatement</a>-Methode
					vorkompiliert und dann der string-Wert des Parameters vor dem
					Aufrufen der <a href="25dabdc9-c60f-485a-87eb-306067964765.htm">setString</a>-Methode
					mit der <a href="ca534c6b-ef4d-4ae8-8cc3-514728623cff.htm">executeUpdate</a>-Methode
					festgelegt.
				</p>
				<div name="snippetGroup">
					<div class="sampleCode">
						<span codeLanguage="Java"><pre>PreparedStatement pstmt = con.prepareStatement("UPDATE employee SET
   fname = ? WHERE (lname = 'Brown')");
String first = "Bob";
pstmt.setString(1, first);
int rowCount = pstmt.executeUpdate();
pstmt.close();

</pre></span>
					</div>
				</div>
				<p>
					Weitere Informationen zu parametrisierten Abfragen finden Sie unter
					<span sdata="link"><a
						href="3202b88f-ce13-44dd-982c-c6a3b0260378.htm">Verwenden von
							SQL-Anweisungen mit Parametern</a></span>.
				</p>
			</div>
			<h1 class="heading">Übergeben von Parametern an gespeicherte
				Prozeduren</h1>
			<div id="sectionSection5" class="section" name="collapseableSection"
				style="">
				<p>
					Wenn Sie typisierte Parameter an eine gespeicherte Prozedur
					übergeben müssen, können Sie die Parameter mit einer der <b>set&lt;Type&gt;</b>-Methoden
					der <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a>-Klasse
					anhand eines Namens oder eines Index festlegen. Im folgenden
					Beispiel werden der Aufruf der gespeicherten Prozedur mit der <a
						href="265b024c-898a-4bd0-98b5-f06076717b9e.htm">prepareCall</a>-Methode
					eingerichtet und dann die Parameter für den Aufruf vor dem Aufrufen
					der <a href="f38b97b5-d4f0-4f74-a33d-740241a85842.htm">setString</a>-Methode
					mit der <a href="599cf463-e19f-4baa-bacb-513cad7c6cd8.htm">executeQuery</a>-Methode
					festgelegt.
				</p>
				<div name="snippetGroup">
					<div class="sampleCode">
						<span codeLanguage="Java"><pre>CallableStatement cstmt = con.prepareCall("{call employee_jobid(?)}");
String lname = "Brown";
cstmt.setString(1, lname);
Resultset rs = cstmt.executeQuery();
rs.close();
cstmt.close();

</pre></span>
					</div>
				</div>
				<div style="margin: .5em 1.5em .5em 1.5em">
					<b></b>
					<p>In diesem Beispiel wird ein Resultset zurückgegeben, das die
						Ergebnisse der gespeicherten Prozedur enthält.</p>
				</div>
				<p>
					Weitere Informationen zum Verwenden des JDBC-Treibers mit
					gespeicherten Prozeduren und Eingabeparametern finden Sie unter <span
						sdata="link"><a
						href="8f491b70-7d1b-42bd-964f-9a8b86af5eaa.htm">Verwenden von
							gespeicherten Prozeduren mit Eingabeparametern</a></span>.
				</p>
			</div>
			<h1 class="heading">Abrufen von Parametern von gespeicherten
				Prozeduren</h1>
			<div id="sectionSection6" class="section" name="collapseableSection"
				style="">
				<p>
					Wenn Sie Parameter wieder von einer gespeicherten Prozedur abrufen
					müssen, müssen Sie zuerst mit der <a
						href="82f8d608-efc1-4af8-a985-ec25d19420aa.htm">registerOutParameter</a>-Methode
					der <b>SQLServerCallableStatement</b>-Klasse anhand Name oder Index
					einen out-Parameter registrieren und den zurückgegebenen
					out-Parameter nach dem Aufruf der gespeicherten Prozedur einer
					geeigneten Variablen zuordnen. Im folgenden Beispiel werden der
					Aufruf der gespeicherten Prozedur mit der <b>prepareCall</b>-Methode
					eingerichtet, der out-Parameter mit der <b>registerOutParameter</b>-Methode
					eingerichtet und dann die Parameter für den Aufruf vor dem Aufrufen
					der <b>executeQuery</b>-Methode mit der <a
						href="f38b97b5-d4f0-4f74-a33d-740241a85842.htm">setString</a>-Methode
					festgelegt. Der vom out-Parameter der gespeicherten Prozedur
					zurückgegebene Wert wird mit der <a
						href="9e3c51bc-7285-4f28-92c8-cfa05e49da9e.htm">getShort</a>-Methode
					abgerufen.
				</p>
				<div name="snippetGroup">
					<div class="sampleCode">
						<span codeLanguage="Java"><pre>CallableStatement cstmt = con.prepareCall("{call employee_jobid (?, ?)}");
cstmt.registerOutParameter(2, java.sql.Types.SMALLINT);
String lname = "Brown";
cstmt.setString(1, lname);
Resultset rs = cstmt.executeQuery();
short empJobID = cstmt.getShort(2);
rs.close();
cstmt.close();

</pre></span>
					</div>
				</div>
				<div style="margin: .5em 1.5em .5em 1.5em">
					<b></b>
					<p>Zusätzlich zum zurückgegebenen out-Parameter kann auch ein
						Resultset zurückgegeben werden, das die Ergebnisse der
						gespeicherten Prozedur enthält.</p>
				</div>
				<p>
					Weitere Informationen zum Verwenden des JDBC-Treibers mit
					gespeicherten Prozeduren und Ausgabeparametern finden Sie unter <span
						sdata="link"><a
						href="1c006f27-7e99-43d5-974c-7b782659290c.htm">Verwenden von
							gespeicherten Prozeduren mit Ausgabeparametern</a></span>.
				</p>
			</div>
			<span id="seeAlsoSpan"><h1 class="heading">Siehe auch</h1></span>
			<div id="seeAlsoSection" class="section" name="collapseableSection"
				style="">
				<div class="seeAlsoStyle">
					<span sdata="link"><a
						href="7802328d-4d23-4775-9573-4169b127d258.htm">Grundlegendes
							zu den Datentypen in JDBC Driver</a></span>
				</div>
			</div>
		</div>
		<div id="footer" class="section">
			<span id="feedbackarea">Senden Sie Microsoft <a
				href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\dVielen%20Dank%20für%20Ihr%20Feedback.%20Die%20Autorenteams%20im%20Bereich%20Entwicklung%20nutzen%20Ihr%20Feedback,%20um%20die%20Dokumentation%20zu%20verbessern.%20Im%20Rahmen%20der%20Überprüfung%20Ihres%20Feedbacks%20erhalten%20Sie%20von%20uns%20ggf.%20eine%20E-Mail%20mit%20Rückfragen%20oder%20Feedback%20zur%20möglichen%20Lösung.%20Ihre%20E-Mail-Adresse%20wird%20von%20uns%20nicht%20zu%20anderen%20Zwecken%20verwendet%20und%20wird%20gelöscht,%20sobald%20die%20Überprüfung%20Ihres%20Feedbacks%20abgeschlossen%20ist.%0\AWeitere%20Informationen%20zu%20den%20Datenschutzrichtlinien%20von%20Microsoft%20finden%20Sie%20unter%20http://privacy.microsoft.com/de-de/default.aspx.%0\A%0\d','Kundenfeedback');">Feedback</a>
				zu diesem Thema.
			</span><span id="copyrightarea"><p>
					<a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012
						Microsoft. Alle Rechte vorbehalten.</a>
				</p></span>
		</div>
	</div>
</body>
</html>